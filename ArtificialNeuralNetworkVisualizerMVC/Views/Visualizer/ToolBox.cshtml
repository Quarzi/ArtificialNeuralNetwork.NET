@model ArtificialNeuralNetworkVisualizerMVC.Models.VisualizerSettings

<div class="form-group-sm">
    @Html.LabelFor(model => model.NumberOfInputs, htmlAttributes: new { @class = "control-label" })<br />
    @Html.EditorFor(model => model.NumberOfInputs, new { htmlAttributes = new { @class = "input-sm" } })
    @Html.ValidationMessageFor(model => model.NumberOfInputs, "", new { @class = "text-danger" })
</div>

<div class="form-group">
    @Html.LabelFor(model => model.NumberOfOutputs, htmlAttributes: new { @class = "control-label" })<br />
    @Html.EditorFor(model => model.NumberOfOutputs, new { htmlAttributes = new { @class = "input-sm" } })
    @Html.ValidationMessageFor(model => model.NumberOfOutputs, "", new { @class = "text-danger" })
</div>

<div class="form-group">
    @Html.LabelFor(model => model.NumberOfHiddenLayers, htmlAttributes: new { @class = "control-label" })<br />
    @Html.EditorFor(model => model.NumberOfHiddenLayers, new { htmlAttributes = new { @class = "input-sm" } })
    @Html.ValidationMessageFor(model => model.NumberOfHiddenLayers, "", new { @class = "text-danger" })
</div>

<div class="form-group">
    @Html.LabelFor(model => model.NumberOfNeuronPerHiddenLayer, htmlAttributes: new { @class = "control-label" })<br />
    @Html.EditorFor(model => model.NumberOfNeuronPerHiddenLayer, new { htmlAttributes = new { @class = "input-sm" } })
    @Html.ValidationMessageFor(model => model.NumberOfNeuronPerHiddenLayer, "", new { @class = "text-danger" })
</div>

<div class="form-group">
    @Html.LabelFor(model => model.TransferFunction, htmlAttributes: new { @class = "control-label" })<br />
    @Html.EditorFor(model => model.TransferFunction, new { htmlAttributes = new { @class = "input-sm" } })
    @Html.ValidationMessageFor(model => model.TransferFunction, "", new { @class = "text-danger" })
</div>



<div class="form-group">
    @Html.LabelFor(model => model.TrainingMethod, htmlAttributes: new { @class = "control-label" })<br />
    @Html.EditorFor(model => model.TrainingMethod, new { htmlAttributes = new { @class = "input-sm" } })
    @Html.ValidationMessageFor(model => model.TrainingMethod, "", new { @class = "text-danger" })
</div>

<div class="form-group">
    @Html.LabelFor(model => model.TrainingScheme, htmlAttributes: new { @class = "control-label" })<br />
    @Html.EditorFor(model => model.TrainingScheme, new { htmlAttributes = new { @class = "input-sm" } })
    @Html.ValidationMessageFor(model => model.TrainingScheme, "", new { @class = "text-danger" })
</div>

<div class="form-group">
    @Html.LabelFor(model => model.CostFunction, htmlAttributes: new { @class = "control-label" })<br />
    @*@Html.EditorFor(model => model.CostFunction, new { htmlAttributes = new { @class = "form-control" } })*@
    @*@Html.ValidationMessageFor(model => model.CostFunction, "", new { @class = "text-danger" })*@
    @Html.DropDownListFor(o => o.CostFunction, Enum.GetValues(typeof(ArtificialNeuralNetwork.Trainer.CostFunctions)).Cast<ArtificialNeuralNetwork.Trainer.CostFunctions>().Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }), new { @class = "input-sm" })
</div>

<div class="form-group">
    @Html.LabelFor(model => model.LerningRate, htmlAttributes: new { @class = "control-label" })<br />
    @Html.EditorFor(model => model.LerningRate, new { htmlAttributes = new { @class = "input-sm" } })
    @Html.ValidationMessageFor(model => model.LerningRate, "", new { @class = "text-danger" })
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Epsilon, htmlAttributes: new { @class = "control-label" })<br />
    @Html.EditorFor(model => model.Epsilon, new { htmlAttributes = new { @class = "input-sm" } })
    @Html.ValidationMessageFor(model => model.Epsilon, "", new { @class = "text-danger" })
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Epochs, htmlAttributes: new { @class = "control-label" })<br />
    @Html.EditorFor(model => model.Epochs, new { htmlAttributes = new { @class = "input-sm" } })
    @Html.ValidationMessageFor(model => model.Epochs, "", new { @class = "text-danger" })
    @Html.
</div>